{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#snapenv-core-package","title":"\ud83d\udc56 SnapEnv Core package","text":"<p>Awesome snapenv_core created by snapenv</p> <p>It was created having in mind SnapEnv people and what the most common use-cases would be. Following its structure you'll get into developing your next FastAPI server in no time!</p> <ul> <li>a configuration module made using pydantic-settings</li> <li>a handful of Pydantic schemas to make your life as a programmer easier</li> </ul>"},{"location":"#features","title":"Features","text":"<ol> <li>\ud83c\udf6c Sklearn meta-estimator: add conformal prediction of quantiles and intervals to any scikit-learn regressor</li> <li>\ud83d\udcc3 Documentation: Documentation structure using mkdocs</li> <li>\ud83c\udf21\ufe0f Conformally calibrated: accurate quantiles, and intervals with reliable coverage</li> <li>\ud83d\udea6 Coherent quantiles: quantiles increase monotonically instead of crossing each other</li> <li>\ud83d\udc56 Tight quantiles: selects the lowest dispersion that provides the desired coverage</li> <li>\ud83c\udf81 Data efficient: requires only a small number of calibration examples to fit</li> <li>\ud83d\udc3c Pandas support: optionally predict on DataFrames and receive DataFrame output</li> </ol>"},{"location":"#using","title":"Using","text":""},{"location":"#quick-links","title":"Quick links","text":"<ol> <li>Installing</li> </ol>"},{"location":"#installing","title":"Installing","text":"<pre><code>poetry add snapenv-core\n</code></pre> <pre><code>pip install snapenv-core\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"Prerequisites <ol> <li> <p>Set up Git to use SSH</p> <ol> <li> <p>Generate an SSH key and add the SSH key to your GitHub account.</p> </li> <li> <p>Configure SSH to automatically load your SSH keys:     <pre><code>cat &lt;&lt; EOF &gt;&gt; ~/.ssh/config\n\nHost *\n  AddKeysToAgent yes\n  IgnoreUnknown UseKeychain\n  UseKeychain yes\n  ForwardAgent yes\nEOF\n</code></pre></p> </li> </ol> </li> <li> <p>Install Docker Desktop.</p> <ul> <li>Linux only:<ul> <li>Export your user's user id and group id so that files created in the Dev Container are owned by your user:     <pre><code>cat &lt;&lt; EOF &gt;&gt; ~/.bashrc\n\nexport UID=$(id --user)\nexport GID=$(id --group)\nEOF\n</code></pre></li> </ul> </li> </ul> </li> <li> <p>Install VS Code or PyCharm</p> <ol> <li>Install VS Code and VS Code's Dev Containers extension. Alternatively, install PyCharm.</li> <li>Optional: install a Nerd Font such as FiraCode Nerd Font and configure VS Code or configure PyCharm to use it.</li> </ol> </li> </ol> Development environments <p>The following development environments are supported:</p> <ol> <li>\u2b50\ufe0f GitHub Codespaces: click on Code and select Create codespace to start a Dev Container with GitHub Codespaces.</li> <li>\u2b50\ufe0f Dev Container (with container volume): click on Open in Dev Containers to clone this repository in a container volume and create a Dev Container with VS Code.</li> <li>Dev Container: clone this repository, open it with VS Code, and run Ctrl/\u2318 + \u21e7 + P \u2192 Dev Containers: Reopen in Container.</li> <li>PyCharm: clone this repository, open it with PyCharm, and configure Docker Compose as a remote interpreter with the <code>dev</code> service.</li> <li>Terminal: clone this repository, open it with your terminal, and run <code>docker compose up --detach dev</code> to start a Dev Container in the background, and then run <code>docker compose exec dev zsh</code> to open a shell prompt in the Dev Container.</li> </ol> Developing <ul> <li>This project follows the Conventional Commits standard to automate Semantic Versioning and Keep A Changelog with Commitizen.</li> <li>Run <code>poe</code> from within the development environment to print a list of Poe the Poet tasks available to run on this project.</li> <li>Run <code>poetry add {package}</code> from within the development environment to install a run time dependency and add it to <code>pyproject.toml</code> and <code>poetry.lock</code>. Add <code>--group test</code> or <code>--group dev</code> to install a CI or development dependency, respectively.</li> <li>Run <code>poetry update</code> from within the development environment to upgrade all dependencies to the latest versions allowed by <code>pyproject.toml</code>.</li> <li>Run <code>poe docs</code>, <code>poe lint</code> and <code>ENVIRONMENT=dev poe test</code> before any commit, or your git push can fail. <code>poe docs</code> generate any new documentation for changes/additions in the python modules.</li> <li>Run <code>cz --name cz_gitmoji commit</code> to commit files using conventional commits with emojis.</li> <li>Run <code>cz --name cz_gitmoji bump --changelog</code> to bump the package's version, update the <code>CHANGELOG.md</code>, and create a git tag.</li> <li>Run <code>git push --tags</code> to push the new tag to github.</li> </ul>"},{"location":"API-Reference/snap_package_template/","title":"Index","text":"<p>Snap Package Template.</p> <p>This is a template for the Snap Python package, designed for easy starting and structuring of Python projects. This package includes basic versioning and a simple function example.</p> ATTRIBUTE DESCRIPTION <code>__version__</code> <p>The current version of the package.</p> <p> TYPE: <code>str</code> </p> <code>__version_tuple__</code> <p>The current version of the package as a tuple.</p> <p> TYPE: <code>tuple</code> </p>"},{"location":"API-Reference/snap_package_template/#src.snapenv_core.some_function","title":"<code>some_function()</code>","text":"<p>Demonstrate the structure of a Python function.</p> <p>This function returns a test string.</p> RETURNS DESCRIPTION <code>str</code> <p>A string containing \"some_variable_to_test\".</p> Source code in <code>src/snapenv_core/__init__.py</code> <pre><code>def some_function() -&gt; str:\n    \"\"\"\n    Demonstrate the structure of a Python function.\n\n    This function returns a test string.\n\n    Returns\n    -------\n    str\n        A string containing \"some_variable_to_test\".\n    \"\"\"\n    return \"some_variable_to_test\"\n</code></pre>"},{"location":"API-Reference/snapenv_core/","title":"Index","text":"<p>Snap Package Template.</p> <p>This is a template for the Snap Python package, designed for easy starting and structuring of Python projects. This package includes basic versioning and a simple function example.</p> ATTRIBUTE DESCRIPTION <code>__version__</code> <p>The current version of the package.</p> <p> TYPE: <code>str</code> </p> <code>__version_tuple__</code> <p>The current version of the package as a tuple.</p> <p> TYPE: <code>tuple</code> </p>"},{"location":"API-Reference/snapenv_core/#src.snapenv_core.some_function","title":"<code>some_function()</code>","text":"<p>Demonstrate the structure of a Python function.</p> <p>This function returns a test string.</p> RETURNS DESCRIPTION <code>str</code> <p>A string containing \"some_variable_to_test\".</p> Source code in <code>src/snapenv_core/__init__.py</code> <pre><code>def some_function() -&gt; str:\n    \"\"\"\n    Demonstrate the structure of a Python function.\n\n    This function returns a test string.\n\n    Returns\n    -------\n    str\n        A string containing \"some_variable_to_test\".\n    \"\"\"\n    return \"some_variable_to_test\"\n</code></pre>"},{"location":"API-Reference/snapenv_core/config/","title":"Index","text":"<p>SnapEnv Core Config.</p>"},{"location":"API-Reference/snapenv_core/config/manager/","title":"Manager","text":"<p>SnapEnv Base Settings.</p> <p>This module contains the base settings and configurations used across different environments within the SnapEnv framework. It provides constants, environment detection, and directory setup necessary for the application to function correctly, especially in containerized environments such as Docker.</p> <p>The module also defines the <code>SnapEnvCommonSettings</code> class, which manages the configuration parameters, their sources, and provides methods to retrieve environment-specific information like the local server name and platform.</p> ATTRIBUTE DESCRIPTION <code>SECRETS_DIR</code> <p>Directory path where secret files are located, depending on whether the code is running inside a Docker container or not.</p> <p> TYPE: <code>str</code> </p> <code>PLATFORM</code> <p>Mapping of platform identifiers to their respective names.</p> <p> TYPE: <code>dict</code> </p> <code>ENVIRONMENT</code> <p>Current environment identifier, sourced from the ENVIRONMENT environment variable.</p> <p> TYPE: <code>str</code> </p> Secret Directory Setup <p>The module ensures that the secrets directory exists unless running inside a Docker container, where Docker handles directory management.</p> Environment File Selection <p>The <code>.env</code> file used by the application is determined by the value of the <code>ENVIRONMENT</code> environment variable.</p> <ul> <li>If <code>ENVIRONMENT</code> is set to a value (e.g., 'production'), the application will   look for a file named <code>&lt;ENVIRONMENT&gt;.env</code> (e.g., <code>production.env</code>).</li> <li>This file name is specified in the <code>model_config</code> attribute of the   <code>SnapEnvCommonSettings</code> class under <code>env_file</code>.</li> <li>The <code>.env</code> file should be located in the root directory of the project.</li> <li>If <code>ENVIRONMENT</code> is not set, the application will default to using <code>.env</code> as   the configuration file.</li> </ul>"},{"location":"API-Reference/snapenv_core/config/manager/#src.snapenv_core.config.manager.SnapEnvCommonSettings","title":"<code>SnapEnvCommonSettings</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>SnapEnv common configuration parameters shared between all instances.</p> <p>This class reads configuration parameters defined within the class, from environment variables, and from the configuration file's. The source priority is as follows (from highest to lowest):</p> <ul> <li>env_settings</li> <li>dotenv_settings</li> <li>init_settings</li> <li>file_secret_settings</li> </ul> Environment Variables <p>The following environment variables should be defined:</p> <ul> <li>HOSTNAME (on Linux servers only, set by OS)</li> <li>COMPUTERNAME (on Windows servers only, set by OS)</li> <li>ENVIRONMENT (on all servers)</li> </ul> File Paths <p>Paths where the .env file should be placed: <ul> <li>Linux: /home/&lt;user&gt;/.local</li> <li>macOS: /home/&lt;user&gt;/.local</li> <li>Windows: C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Python</li> <li>Python/Poetry/Docker: Root dir of the project</li> </ul> <p>Paths where secret files should be placed:</p> <ul> <li>Linux: /home/&lt;user&gt;/.local/secrets</li> <li>macOS: /home/&lt;user&gt;/.local/secrets</li> <li>Windows: C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Python\\secrets</li> <li>Docker: /run/secrets</li> </ul> ATTRIBUTE DESCRIPTION <code>env</code> <p>The current environment.</p> <p> TYPE: <code>str</code> </p> <code>platform</code> <p>The platform on which the code is running.</p> <p> TYPE: <code>str</code> </p> <code>server</code> <p>Local server name stripped of possible domain part.</p> <p> TYPE: <code>str</code> </p> <code>model_config</code> <p>Configuration dictionary for settings including secrets and .env file handling.</p> <p> TYPE: <code>SettingsConfigDict</code> </p> METHOD DESCRIPTION <code>server</code> <p>Returns the local server name in upper case.</p> <code>settings_customise_sources</code> <p>Customizes the source priority order.</p> Source code in <code>src/snapenv_core/config/manager.py</code> <pre><code>class SnapEnvCommonSettings(BaseSettings):\n    r\"\"\"\n    SnapEnv common configuration parameters shared between all instances.\n\n    This class reads configuration parameters defined within the class,\n    from environment variables, and from the configuration file's. The source priority\n    is as follows (from highest to lowest):\n\n    - env_settings\n    - dotenv_settings\n    - init_settings\n    - file_secret_settings\n\n    Environment Variables\n    ---------------------\n    The following environment variables should be defined:\n\n    - HOSTNAME (on Linux servers only, set by OS)\n    - COMPUTERNAME (on Windows servers only, set by OS)\n    - ENVIRONMENT (on all servers)\n\n    File Paths\n    ----------\n    Paths where the &lt;environment&gt;.env file should be placed:\n\n    - Linux: /home/&lt;user\\&gt;/.local\n    - macOS: /home/&lt;user\\&gt;/.local\n    - Windows: C:\\\\Users\\\\&lt;user\\&gt;\\\\AppData\\\\Roaming\\\\Python\n    - Python/Poetry/Docker: Root dir of the project\n\n    Paths where secret files should be placed:\n\n    - Linux: /home/&lt;user\\&gt;/.local/secrets\n    - macOS: /home/&lt;user\\&gt;/.local/secrets\n    - Windows: C:\\\\Users\\\\&lt;user\\&gt;\\\\AppData\\\\Roaming\\\\Python\\\\secrets\n    - Docker: /run/secrets\n\n    Attributes\n    ----------\n    env : str\n        The current environment.\n    platform : str\n        The platform on which the code is running.\n    server : str\n        Local server name stripped of possible domain part.\n    model_config : SettingsConfigDict\n        Configuration dictionary for settings including secrets and .env file handling.\n\n    Methods\n    -------\n    server():\n        Returns the local server name in upper case.\n    settings_customise_sources(settings_cls, init_settings, env_settings, dotenv_settings, file_secret_settings):\n        Customizes the source priority order.\n    \"\"\"\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        secrets_dir=SECRETS_DIR,\n        env_file_encoding=\"utf-8\",\n        env_file=f\"{ENVIRONMENT}.env\",\n    )\n\n    # constant parameters.\n\n    # Environment depending parameters.\n    env: str = ENVIRONMENT\n    platform: str = PLATFORM.get(sys.platform, \"other\")\n\n    @computed_field  # type: ignore[misc]\n    @property\n    def server(self) -&gt; str:\n        \"\"\"\n        Return local server name stripped of possible domain part.\n\n        Returns\n        -------\n        str\n            Server name in upper case.\n        \"\"\"\n        return platform.node()\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n        \"\"\"\n        Change source priority order (env trumps environment).\n\n        Parameters\n        ----------\n        settings_cls : type[BaseSettings]\n            The settings class.\n        init_settings : PydanticBaseSettingsSource\n            Initial settings source.\n        env_settings : PydanticBaseSettingsSource\n            Environment variable settings source.\n        dotenv_settings : PydanticBaseSettingsSource\n            Dotenv file settings source.\n        file_secret_settings : PydanticBaseSettingsSource\n            Secret file settings source.\n\n        Returns\n        -------\n        tuple[PydanticBaseSettingsSource, ...]\n            Tuple of settings sources in the new priority order.\n        \"\"\"\n        return (env_settings, dotenv_settings, init_settings, file_secret_settings)\n</code></pre>"},{"location":"API-Reference/snapenv_core/config/manager/#src.snapenv_core.config.manager.SnapEnvCommonSettings.server","title":"<code>server: str</code>  <code>property</code>","text":"<p>Return local server name stripped of possible domain part.</p> RETURNS DESCRIPTION <code>str</code> <p>Server name in upper case.</p>"},{"location":"API-Reference/snapenv_core/config/manager/#src.snapenv_core.config.manager.SnapEnvCommonSettings.settings_customise_sources","title":"<code>settings_customise_sources(settings_cls, init_settings, env_settings, dotenv_settings, file_secret_settings)</code>  <code>classmethod</code>","text":"<p>Change source priority order (env trumps environment).</p> PARAMETER DESCRIPTION <code>settings_cls</code> <p>The settings class.</p> <p> TYPE: <code>type[BaseSettings]</code> </p> <code>init_settings</code> <p>Initial settings source.</p> <p> TYPE: <code>PydanticBaseSettingsSource</code> </p> <code>env_settings</code> <p>Environment variable settings source.</p> <p> TYPE: <code>PydanticBaseSettingsSource</code> </p> <code>dotenv_settings</code> <p>Dotenv file settings source.</p> <p> TYPE: <code>PydanticBaseSettingsSource</code> </p> <code>file_secret_settings</code> <p>Secret file settings source.</p> <p> TYPE: <code>PydanticBaseSettingsSource</code> </p> RETURNS DESCRIPTION <code>tuple[PydanticBaseSettingsSource, ...]</code> <p>Tuple of settings sources in the new priority order.</p> Source code in <code>src/snapenv_core/config/manager.py</code> <pre><code>@classmethod\ndef settings_customise_sources(\n    cls,\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n    \"\"\"\n    Change source priority order (env trumps environment).\n\n    Parameters\n    ----------\n    settings_cls : type[BaseSettings]\n        The settings class.\n    init_settings : PydanticBaseSettingsSource\n        Initial settings source.\n    env_settings : PydanticBaseSettingsSource\n        Environment variable settings source.\n    dotenv_settings : PydanticBaseSettingsSource\n        Dotenv file settings source.\n    file_secret_settings : PydanticBaseSettingsSource\n        Secret file settings source.\n\n    Returns\n    -------\n    tuple[PydanticBaseSettingsSource, ...]\n        Tuple of settings sources in the new priority order.\n    \"\"\"\n    return (env_settings, dotenv_settings, init_settings, file_secret_settings)\n</code></pre>"},{"location":"API-Reference/snapenv_core/config/manager/#src.snapenv_core.config.manager.initialize_secret_dir","title":"<code>initialize_secret_dir()</code>","text":"<p>Initialize the secret directory if not running inside a Docker container.</p> <p>This function checks for the presence of the \"/.dockerenv\" file to determine if the code is running inside a Docker container. If the file does not exist, it creates the directory specified by the <code>SECRETS_DIR</code> module variable.</p> PARAMETER DESCRIPTION <code>None</code> <p> </p> RETURNS DESCRIPTION <code>None</code> RAISES DESCRIPTION <code>OSError</code> <p>If the directory creation fails due to insufficient permissions or other file system-related issues.</p> Notes <p>The function uses <code>os.makedirs</code> with <code>exist_ok=True</code>, so if the directory specified by <code>SECRETS_DIR</code> already exists, the function will not raise an exception.</p> Source code in <code>src/snapenv_core/config/manager.py</code> <pre><code>def initialize_secret_dir() -&gt; None:\n    \"\"\"\n    Initialize the secret directory if not running inside a Docker container.\n\n    This function checks for the presence of the \"/.dockerenv\" file to determine\n    if the code is running inside a Docker container. If the file does not exist,\n    it creates the directory specified by the `SECRETS_DIR` module variable.\n\n    Parameters\n    ----------\n    None\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    OSError\n        If the directory creation fails due to insufficient permissions or other\n        file system-related issues.\n\n    Notes\n    -----\n    The function uses `os.makedirs` with `exist_ok=True`, so if the directory\n    specified by `SECRETS_DIR` already exists, the function will not raise an\n    exception.\n    \"\"\"\n    if not os.path.exists(\"/.dockerenv\"):\n        os.makedirs(SECRETS_DIR, exist_ok=True)\n</code></pre>"},{"location":"adr/0001-record-architecture-decisions/","title":"Use Markdown Any Decision Records V3","text":""},{"location":"adr/0001-record-architecture-decisions/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We want to record any decisions made in this project independent whether decisions concern the architecture (\"architectural decision record\"), the code, or other fields. Which format and structure should these records follow?</p>"},{"location":"adr/0001-record-architecture-decisions/#considered-options","title":"Considered Options","text":"<ul> <li>MADR 3.0.0 \u2013 The Markdown Any Decision Records</li> <li>Michael Nygard's template \u2013 The first incarnation of the term \"ADR\"</li> <li>Other templates listed at https://schubmat.github.io/DecisionCapture</li> <li>Formless \u2013 No conventions for file format and structure</li> </ul>"},{"location":"adr/0001-record-architecture-decisions/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"MADR 3.0.0\", because</p> <ul> <li>Implicit assumptions should be made explicit.   Design documentation is important to enable people understanding the decisions later on.   See also A rational design process: How and why to fake it.</li> <li>MADR allows for structured capturing of any decision.</li> <li>The MADR format is lean and fits our development style.</li> <li>The MADR structure is comprehensible and facilitates usage &amp; maintenance.</li> <li>The MADR project is vivid.</li> </ul>"},{"location":"adr/0002-use-pydantic-settings/","title":"Use Pydantic Settings for Configuration Management","text":""},{"location":"adr/0002-use-pydantic-settings/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>In developing our Python package, we need a reliable way to manage configuration settings, including reading environment variables and validating them. The configuration should be easy to maintain, extend, and integrate well with other components of the package. The following options were considered:</p>"},{"location":"adr/0002-use-pydantic-settings/#considered-options","title":"Considered Options","text":"<ul> <li>Pydantic Settings</li> <li>Dynaconf</li> <li>python-dotenv</li> <li>environs</li> <li>Reading environment variables using <code>os.environ</code>.</li> </ul>"},{"location":"adr/0002-use-pydantic-settings/#decision-outcome","title":"Decision Outcome","text":"<p>We decided to use <code>pydantic_settings</code> as the primary configuration management tool in our package.</p>"},{"location":"adr/0002-use-pydantic-settings/#consequences","title":"Consequences","text":""},{"location":"adr/0002-use-pydantic-settings/#positive-consequences","title":"Positive Consequences:","text":"<ul> <li>Data Validation: <code>pydantic_settings</code> leverages Pydantic's powerful data validation, ensuring that all configuration values are of the expected type and format.</li> <li>Ease of Use: It provides a declarative approach to defining settings, making the code more readable and maintainable.</li> <li>Type Safety: The use of Pydantic models ensures type safety across the configuration.</li> <li>Extensibility: Easily integrates with other Pydantic features, such as nested models and complex data structures.</li> <li>Environment Management: Supports reading from environment variables out-of-the-box, which aligns with the need to manage settings in different environments (e.g., development, staging, production).</li> <li>Consistency Across Projects: Since we extensively use Pydantic in our applications, utilizing <code>pydantic_settings</code> maintains consistency across the codebase, reducing the learning curve and increasing development efficiency.</li> </ul>"},{"location":"adr/0002-use-pydantic-settings/#negative-consequences","title":"Negative Consequences:","text":"<ul> <li>Learning Curve: Requires familiarity with Pydantic, which might be a barrier for new contributors not experienced with this library.</li> <li>Dependency: Adds a dependency on the Pydantic library, which may increase the package size and complexity.</li> </ul>"},{"location":"adr/0002-use-pydantic-settings/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adr/0002-use-pydantic-settings/#option-1-osenviron","title":"Option 1: <code>os.environ</code>","text":"<ul> <li>Pros:</li> <li>Minimal dependencies.</li> <li>Direct access to environment variables.</li> <li>Cons:</li> <li>No built-in validation or type conversion.</li> <li>Manual error handling and type casting required.</li> </ul>"},{"location":"adr/0002-use-pydantic-settings/#option-2-dynaconf","title":"Option 2: <code>Dynaconf</code>","text":"<ul> <li>Pros:</li> <li>Flexible and supports multiple sources (e.g., <code>.env</code>, environment variables, settings files).</li> <li>Built-in support for different environments (development, production, etc.).</li> <li>Cons:</li> <li>Additional complexity and larger dependency footprint.</li> <li>Can be overkill for simpler projects.</li> </ul>"},{"location":"adr/0002-use-pydantic-settings/#option-3-python-dotenv","title":"Option 3: <code>python-dotenv</code>","text":"<ul> <li>Pros:</li> <li>Simple and lightweight.</li> <li>Easy to use for loading environment variables from a <code>.env</code> file.</li> <li>Cons:</li> <li>No built-in validation or type safety.</li> <li>Limited to environment variable management.</li> </ul>"},{"location":"adr/0002-use-pydantic-settings/#option-4-environs","title":"Option 4: <code>environs</code>","text":"<ul> <li>Pros:</li> <li>Similar simplicity to <code>python-dotenv</code> but with added type validation.</li> <li>Supports nested structures and more complex configurations.</li> <li>Cons:</li> <li>Less feature-rich compared to <code>pydantic_settings</code>.</li> <li>Another dependency to manage, though smaller than Pydantic.</li> </ul>"},{"location":"adr/0002-use-pydantic-settings/#option-5-pydantic_settings","title":"Option 5: <code>pydantic_settings</code>","text":"<ul> <li>Pros:</li> <li>Combines configuration management with robust validation and type safety.</li> <li>Seamless integration with the rest of the package, especially when using Pydantic models.</li> <li>Cons:</li> <li>Dependency on Pydantic.</li> <li>Requires understanding of Pydantic\u2019s data modeling.</li> </ul>"},{"location":"adr/0002-use-pydantic-settings/#references","title":"References","text":"<ul> <li>Pydantic Documentation</li> <li>Dynaconf Documentation</li> <li>python-dotenv Documentation</li> <li>environs Documentation</li> </ul>"},{"location":"adr/adr-template/","title":"Adr template","text":""},{"location":"adr/adr-template/#source-httpsgithubcomadrmadrblob300templateadr-templatemd","title":"source: https://github.com/adr/madr/blob/3.0.0/template/adr-template.md","text":""},{"location":"adr/adr-template/#these-are-optional-elements-feel-free-to-remove-any-of-them","title":"These are optional elements. Feel free to remove any of them.","text":"<p>status: {proposed | rejected | accepted | deprecated | \u2026 | superseded by ADR-0005} date: {YYYY-MM-DD when the decision was last updated} deciders: {list everyone involved in the decision} consulted: {list everyone whose opinions are sought (typically subject-matter experts); and with whom there is a two-way communication} informed: {list everyone who is kept up-to-date on progress; and with whom there is a one-way communication}</p>"},{"location":"adr/adr-template/#short-title-of-solved-problem-and-solution","title":"{short title of solved problem and solution}","text":""},{"location":"adr/adr-template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story.  You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}</p>"},{"location":"adr/adr-template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>{decision driver 1, e.g., a force, facing concern, \u2026}</li> <li>{decision driver 2, e.g., a force, facing concern, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#considered-options","title":"Considered Options","text":"<ul> <li>{title of option 1}</li> <li>{title of option 2}</li> <li>{title of option 3}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"{title of option 1}\", because {justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | \u2026 | comes out best (see below)}.</p>"},{"location":"adr/adr-template/#consequences","title":"Consequences","text":"<ul> <li>Good, because {positive consequence, e.g., improvement of one or more desired qualities, \u2026}</li> <li>Bad, because {negative consequence, e.g., compromising one or more desired qualities, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#validation","title":"Validation","text":"<p>{describe how the implementation of/compliance with the ADR is validated. E.g., by a review or an ArchUnit test}</p>"},{"location":"adr/adr-template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adr/adr-template/#title-of-option-1","title":"{title of option 1}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> </ul> <ul> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#title-of-other-option","title":"{title of other option}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026</li> </ul>"},{"location":"adr/adr-template/#more-information","title":"More Information","text":"<p>{You might want to provide additional evidence/confidence for the decision outcome here and/or  document the team agreement on the decision and/or  define when this decision when and how the decision should be realized and if/when it should be re-visited and/or  how the decision is validated.  Links to other decisions and resources might here appear as well.}</p>"},{"location":"adr/summary/","title":"ADR Summary","text":"ID Date Decision Status 2 11-08-2024 Use Pydantic Settings for Configuration Management Accepted 1 03-02-2024 Use Markdown Any Decision Records V3 Accepted"}]}