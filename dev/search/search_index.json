{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#snapenv-template-for-python-package","title":"\ud83d\udc56 SnapEnv template for Python package","text":"<p>Awesome snapenv_core created by snapenv</p> <p>It was created having in mind SnapEnv people and what the most common use-cases would be. Following its structure you'll get into developing your next FastAPI server in no time!</p> <ul> <li>a configuration module made using pydantic-settings</li> <li>a handful of Pydantic schemas to make your life as a programmer easier</li> </ul>"},{"location":"#features","title":"Features","text":"<ol> <li>\ud83c\udf6c Sklearn meta-estimator: add conformal prediction of quantiles and intervals to any scikit-learn regressor</li> <li>\ud83d\udd2e Darts forecaster: add conformally calibrated probabilistic forecasting to any scikit-learn regressor</li> <li>\ud83c\udf21\ufe0f Conformally calibrated: accurate quantiles, and intervals with reliable coverage</li> <li>\ud83d\udea6 Coherent quantiles: quantiles increase monotonically instead of crossing each other</li> <li>\ud83d\udc56 Tight quantiles: selects the lowest dispersion that provides the desired coverage</li> <li>\ud83c\udf81 Data efficient: requires only a small number of calibration examples to fit</li> <li>\ud83d\udc3c Pandas support: optionally predict on DataFrames and receive DataFrame output</li> </ol>"},{"location":"#using","title":"Using","text":""},{"location":"#quick-links","title":"Quick links","text":"<ol> <li>Installing</li> </ol>"},{"location":"#installing","title":"Installing","text":"<pre><code>poetry add snapenv-core\n</code></pre> <pre><code>pip install snapenv-core\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"Prerequisites <ol> <li> <p>Set up Git to use SSH</p> <ol> <li> <p>Generate an SSH key and add the SSH key to your GitHub account.</p> </li> <li> <p>Configure SSH to automatically load your SSH keys:     <pre><code>cat &lt;&lt; EOF &gt;&gt; ~/.ssh/config\n\nHost *\n  AddKeysToAgent yes\n  IgnoreUnknown UseKeychain\n  UseKeychain yes\n  ForwardAgent yes\nEOF\n</code></pre></p> </li> </ol> </li> <li> <p>Install Docker Desktop.</p> <ul> <li>Linux only:<ul> <li>Export your user's user id and group id so that files created in the Dev Container are owned by your user:     <pre><code>cat &lt;&lt; EOF &gt;&gt; ~/.bashrc\n\nexport UID=$(id --user)\nexport GID=$(id --group)\nEOF\n</code></pre></li> </ul> </li> </ul> </li> <li> <p>Install VS Code or PyCharm</p> <ol> <li>Install VS Code and VS Code's Dev Containers extension. Alternatively, install PyCharm.</li> <li>Optional: install a Nerd Font such as FiraCode Nerd Font and configure VS Code or configure PyCharm to use it.</li> </ol> </li> </ol> Development environments <p>The following development environments are supported:</p> <ol> <li>\u2b50\ufe0f GitHub Codespaces: click on Code and select Create codespace to start a Dev Container with GitHub Codespaces.</li> <li>\u2b50\ufe0f Dev Container (with container volume): click on Open in Dev Containers to clone this repository in a container volume and create a Dev Container with VS Code.</li> <li>Dev Container: clone this repository, open it with VS Code, and run Ctrl/\u2318 + \u21e7 + P \u2192 Dev Containers: Reopen in Container.</li> <li>PyCharm: clone this repository, open it with PyCharm, and configure Docker Compose as a remote interpreter with the <code>dev</code> service.</li> <li>Terminal: clone this repository, open it with your terminal, and run <code>docker compose up --detach dev</code> to start a Dev Container in the background, and then run <code>docker compose exec dev zsh</code> to open a shell prompt in the Dev Container.</li> </ol> Developing <ul> <li>This project follows the Conventional Commits standard to automate Semantic Versioning and Keep A Changelog with Commitizen.</li> <li>Run <code>poe</code> from within the development environment to print a list of Poe the Poet tasks available to run on this project.</li> <li>Run <code>poetry add {package}</code> from within the development environment to install a run time dependency and add it to <code>pyproject.toml</code> and <code>poetry.lock</code>. Add <code>--group test</code> or <code>--group dev</code> to install a CI or development dependency, respectively.</li> <li>Run <code>poetry update</code> from within the development environment to upgrade all dependencies to the latest versions allowed by <code>pyproject.toml</code>.</li> <li>Run <code>poe docs</code>, <code>poe lint</code> and <code>ENVIRONMENT=dev poe test</code> before any commit, or your git push can fail. <code>poe docs</code> generate any new documentation for changes/additions in the python modules.</li> <li>Run <code>cz --name cz_gitmoji commit</code> to commit files using conventional commits with emojis.</li> <li>Run <code>cz --name cz_gitmoji bump --changelog</code> to bump the package's version, update the <code>CHANGELOG.md</code>, and create a git tag.</li> <li>Run <code>git push --tags</code> to push the new tag to github.</li> </ul>"},{"location":"API-Reference/snap_package_template/","title":"Index","text":"<p>Snap Package Template.</p> <p>This is a template for the Snap Python package, designed for easy starting and structuring of Python projects. This package includes basic versioning and a simple function example.</p> ATTRIBUTE DESCRIPTION <code>__version__</code> <p>The current version of the package.</p> <p> TYPE: <code>str</code> </p> <code>__version_tuple__</code> <p>The current version of the package as a tuple.</p> <p> TYPE: <code>tuple</code> </p>"},{"location":"API-Reference/snap_package_template/#src.snapenv_core.some_function","title":"<code>some_function()</code>","text":"<p>Demonstrate the structure of a Python function.</p> <p>This function returns a test string.</p> RETURNS DESCRIPTION <code>str</code> <p>A string containing \"some_variable_to_test\".</p> Source code in <code>src/snapenv_core/__init__.py</code> <pre><code>def some_function() -&gt; str:\n    \"\"\"\n    Demonstrate the structure of a Python function.\n\n    This function returns a test string.\n\n    Returns\n    -------\n    str\n        A string containing \"some_variable_to_test\".\n    \"\"\"\n    return \"some_variable_to_test\"\n</code></pre>"},{"location":"API-Reference/snapenv_core/","title":"Index","text":"<p>Snap Package Template.</p> <p>This is a template for the Snap Python package, designed for easy starting and structuring of Python projects. This package includes basic versioning and a simple function example.</p> ATTRIBUTE DESCRIPTION <code>__version__</code> <p>The current version of the package.</p> <p> TYPE: <code>str</code> </p> <code>__version_tuple__</code> <p>The current version of the package as a tuple.</p> <p> TYPE: <code>tuple</code> </p>"},{"location":"API-Reference/snapenv_core/#src.snapenv_core.some_function","title":"<code>some_function()</code>","text":"<p>Demonstrate the structure of a Python function.</p> <p>This function returns a test string.</p> RETURNS DESCRIPTION <code>str</code> <p>A string containing \"some_variable_to_test\".</p> Source code in <code>src/snapenv_core/__init__.py</code> <pre><code>def some_function() -&gt; str:\n    \"\"\"\n    Demonstrate the structure of a Python function.\n\n    This function returns a test string.\n\n    Returns\n    -------\n    str\n        A string containing \"some_variable_to_test\".\n    \"\"\"\n    return \"some_variable_to_test\"\n</code></pre>"},{"location":"adr/0001-record-architecture-decisions/","title":"Use Markdown Any Decision Records V3","text":""},{"location":"adr/0001-record-architecture-decisions/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We want to record any decisions made in this project independent whether decisions concern the architecture (\"architectural decision record\"), the code, or other fields. Which format and structure should these records follow?</p>"},{"location":"adr/0001-record-architecture-decisions/#considered-options","title":"Considered Options","text":"<ul> <li>MADR 3.0.0 \u2013 The Markdown Any Decision Records</li> <li>Michael Nygard's template \u2013 The first incarnation of the term \"ADR\"</li> <li>Other templates listed at https://schubmat.github.io/DecisionCapture</li> <li>Formless \u2013 No conventions for file format and structure</li> </ul>"},{"location":"adr/0001-record-architecture-decisions/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"MADR 3.0.0\", because</p> <ul> <li>Implicit assumptions should be made explicit.   Design documentation is important to enable people understanding the decisions later on.   See also A rational design process: How and why to fake it.</li> <li>MADR allows for structured capturing of any decision.</li> <li>The MADR format is lean and fits our development style.</li> <li>The MADR structure is comprehensible and facilitates usage &amp; maintenance.</li> <li>The MADR project is vivid.</li> </ul>"},{"location":"adr/adr-template/","title":"Adr template","text":""},{"location":"adr/adr-template/#source-httpsgithubcomadrmadrblob300templateadr-templatemd","title":"source: https://github.com/adr/madr/blob/3.0.0/template/adr-template.md","text":""},{"location":"adr/adr-template/#these-are-optional-elements-feel-free-to-remove-any-of-them","title":"These are optional elements. Feel free to remove any of them.","text":"<p>status: {proposed | rejected | accepted | deprecated | \u2026 | superseded by ADR-0005} date: {YYYY-MM-DD when the decision was last updated} deciders: {list everyone involved in the decision} consulted: {list everyone whose opinions are sought (typically subject-matter experts); and with whom there is a two-way communication} informed: {list everyone who is kept up-to-date on progress; and with whom there is a one-way communication}</p>"},{"location":"adr/adr-template/#short-title-of-solved-problem-and-solution","title":"{short title of solved problem and solution}","text":""},{"location":"adr/adr-template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story.  You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}</p>"},{"location":"adr/adr-template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>{decision driver 1, e.g., a force, facing concern, \u2026}</li> <li>{decision driver 2, e.g., a force, facing concern, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#considered-options","title":"Considered Options","text":"<ul> <li>{title of option 1}</li> <li>{title of option 2}</li> <li>{title of option 3}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"{title of option 1}\", because {justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | \u2026 | comes out best (see below)}.</p>"},{"location":"adr/adr-template/#consequences","title":"Consequences","text":"<ul> <li>Good, because {positive consequence, e.g., improvement of one or more desired qualities, \u2026}</li> <li>Bad, because {negative consequence, e.g., compromising one or more desired qualities, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#validation","title":"Validation","text":"<p>{describe how the implementation of/compliance with the ADR is validated. E.g., by a review or an ArchUnit test}</p>"},{"location":"adr/adr-template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adr/adr-template/#title-of-option-1","title":"{title of option 1}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> </ul> <ul> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#title-of-other-option","title":"{title of other option}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026</li> </ul>"},{"location":"adr/adr-template/#more-information","title":"More Information","text":"<p>{You might want to provide additional evidence/confidence for the decision outcome here and/or  document the team agreement on the decision and/or  define when this decision when and how the decision should be realized and if/when it should be re-visited and/or  how the decision is validated.  Links to other decisions and resources might here appear as well.}</p>"},{"location":"adr/summary/","title":"ADR Summary","text":"ID Date Decision Status 1 03-02-2024 Use Markdown Any Decision Records V3 Accepted"}]}